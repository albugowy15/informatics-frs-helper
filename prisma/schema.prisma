// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String        @id @default(cuid())
  username    String        @unique
  email       String        @unique
  password    String
  fullname    String?
  idLine      String?
  whatsapp    String?
  Plan        Plan[]
  TradeMatkul TradeMatkul[]

  @@index([username])
  @@index([email])
}

model Plan {
  id       String  @id @default(cuid())
  title    String
  totalSks Int
  semester Int
  Class    Class[]
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?

  @@index([userId])
}

model Matkul {
  id       String  @id @default(cuid())
  name     String
  Class    Class[]
  semester Int
  sks      Int

  @@index([name])
  @@index([semester])
}

model Class {
  id           String        @id @default(cuid())
  Matkul       Matkul        @relation(fields: [matkulId], references: [id])
  matkulId     String
  Lecturer     Lecturer[]
  day          String?
  code         String
  taken        Int
  Session      Session?       @relation(fields: [sessionId], references: [id])
  sessionId    Int?
  Plan         Plan[]
  searchMatkul TradeMatkul[] @relation("searchMatkul")
  hasMatkul    TradeMatkul[] @relation("hasMatkul")

  @@index([sessionId])
  @@index([matkulId])
  @@index([taken])
}

model Session {
  id           Int     @id @default(autoincrement())
  session_time String
  Matkul       Class[]
}

model Lecturer {
  id       String  @id @default(cuid())
  code     String
  fullname String
  Class    Class[]
}

model TradeMatkul {
  id             String  @id @default(cuid())
  searchMatkul   Class   @relation("searchMatkul", fields: [searchMatkulId], references: [id])
  searchMatkulId String
  hasMatkul      Class   @relation("hasMatkul", fields: [hasMatkulId], references: [id])
  hasMatkulId    String
  description    String
  User           User?   @relation(fields: [userId], references: [id])
  userId         String
  closed         Boolean

  @@index([userId])
  @@index([searchMatkulId])
  @@index([hasMatkulId])
}
